Configurando o banco.

1° Instalar as dependencias do (pg, pg-hstore, sequelize e sequelize-cli);

2° Criar as constantes no .env;
    #Banco de dados
    DIALECT = postgres
    HOST = localhost
    USER_NAME = postgres
    PASSWORD = 123456
    DATABASE = gestao_service
    PORT = 5432

3° Criar configurações de sequelize na pasta config, criando um arquivo database.

4° Criar o arquivo .sequelizerc na raiz do projeto e configura=la;

5° Executar os comandos "criar-banco"(para criar o banco no postgres) e "criar-migration"(criar a migration na pasta migrations);

6° Após criada a migrations, ir no arquivo de migrations e renomea-la e em seguida realizar as modificações necessárias dentro do "up" e do "down";

7° Criar o modelo para que o sequelize saiba trabalhar com ele, criar dentro da pasta "models";

8° Dentro da pasta "database" criar um arquivo chamado index.js, que será o responsável por configurar os models.
dentro desse arquivo é onde iremos importar e inicializar os modelos criados.

9° executar o comando "npm run executar-migration" para que o sequelize crie a tabela perfil. 

10° Criar a migration de usuario atraves do comando "criar-migration" e renomeando ele.
    - Configurar o arquivo criado na migration;
    - Criar e configurar o arquivo criado dentro da pasta models;
    - Configurar o arquivo index.js com o modelo de Usuario

11° Criar erros personalizados;

12° Criar o serviço de usuário
    - Dentro da pasta service, criar o arquivo "usuárioService",  que é o arquivvo que conhece toda a lógica de negocio de uma API.
    - Na pasta "utils" criar um arquivo chamado "geradorToken.js", ele vai saber gerar token e gerar a senha para nós.
    - Baixar o md5 (npm i md5), é um tipo de criptografia que faz e não desfaz, gerar o hash das senhas, gera criptografados.
    - Exportar o gerador para o usuarioService e adicionar a lógica.
    - Exportar o usuarioService para o usuarioController e fazer a lógica.

13° Para debugar uma aplicação com Node.js. - Aperta "F5" e seleciona "Node.js" e em seguida coloca o braik point". 

14° Criar uma pasta chamada http para fazer os testes, nessa parta estara todas as requisições http da API.
    - Instalar a extensão, REST client, ela permite que façamos requisições http por dentro do VScode. 

15° Criar o cache, vai ser a lista em memoria que armazena todos os usuarios presentes na aplicação; 

16° Criar o método de logout. Criar uma função no usuário controller e uma função no usuário service. 

16° Criar método para obter o usuário pelo seu ID. 

17° Criar os dtos, criado para transformar e enviar dados para o front-end. Recebe dados e transforma em dtos e depois envia para os clientes. 
    - Criar o arquivo "usuarioDTO.js" - Classe que vai ter toda a lógica de como funciona u8m usuário dentro da aplicação.
    - Importar tanto o Perfil em usuarioService, 

18° Criar um interceptador de rotas, criar um "routes,use" no arquivos de rotas. 

19° Criar método para cadastrar usuário;
    - Sempre vai receber um usuário DTO, sempre que tiver que trafegar um usuário entre as camadas, sempre será o UsuarioDTO. 
    - Criar o método de cadastrar no "usuario.http"
    - Criar a lógica do método cadastrar no "usuarioController". 
    - Adicionar método de validação do cadastro no arquivo "UsuarioDTO". 

19° Criar métodos para atualizar o usuário. 
    - Criar um método no usuarioService para atualizar o usuario, criar o método no usuarioController e tambem o método no usuarioDTO;
    - Criou o serviço, criou o controller, em seguida cria a rota.
    - Criar a rota.

20° Criar a migration de "clientes" e "enderecos", contruir o models dela e em seguida iniciar ela dentro de index.js

21° Criar o serviço de cliente, e ele será o responsável por configurar o endereço. 
    - Criar DTO para Cliente;
    - Criar DTO para endereço;
    - Criar serviço
     - Importar os modelos, os DTO e os erros;
    - criar o controller;
    - Rodar as migrations para criar as tabelas;
    - Criar o hash do cliente, arquivo http.

22° Criou as migrations, models e adicionou no index as classes Status, Serviço e prestador.

23° Criar as migrations e os models de Orcamento e OrcamentoItem.
    - Cria a migration pelo script do package.json,
    - cria os models na pasta models.
    - Roda o script para executar a migration e criar a tabela no banco de dados.

24° Criar as DTOs de orçamento e orçamentoItens

25° Criar o service, o controller e as rotas para o "serviço" e "prestador".



==============================

Passos para criar uma entidade por completo:

1 - Criar a migration
2 - Criar o model
3 - Criar o DTO
4 - Criar o serviço
5 - Criar o controller
6 - Criar as rotas no routes.js

================================

Para obter os orçamentos, como fazer?

Consultas ao banco: (São muitas consultas);
1 - Obter a capa (orçamento);
2 - Obter os itens vinculados ao orçamento;
3 - Para cada orçamentoItem
    3.1 - Prestador;
    3.2 - Serviço;
3- Cliente

Objetos simples: 
Persistencia: Utilizar o sequelize.
Consultas: sequelize.

Objetos complexos, com muitas consultas (ex: Orçamento):
Persistencia: Utilizar o sequelize.
Consultas: CQRS. - Consultas diretas ao banco de dados, a famosa query;

CQRS: DDD arquitetura escaláveis.
CQRS - Comand Query Responsability Segregation
