Configurando o banco.

1° Instalar as dependencias do (pg, pg-hstore, sequelize e sequelize-cli);

2° Criar as constantes no .env;
    #Banco de dados
    DIALECT = postgres
    HOST = localhost
    USER_NAME = postgres
    PASSWORD = 123456
    DATABASE = gestao_service
    PORT = 5432

3° Criar configurações de sequelize na pasta config, criando um arquivo database.

4° Criar o arquivo .sequelizerc na raiz do projeto e configura=la;

5° Executar os comandos "criar-banco"(para criar o banco no postgres) e "criar-migration"(criar a migration na pasta migrations);

6° Após criada a migrations, ir no arquivo de migrations e renomea-la e em seguida realizar as modificações necessárias dentro do "up" e do "down";

7° Criar o modelo para que o sequelize saiba trabalhar com ele, criar dentro da pasta "models";

8° Dentro da pasta "database" criar um arquivo chamado index.js, que será o responsável por configurar os models.
dentro desse arquivo é onde iremos importar e inicializar os modelos criados.

9° executar o comando "npm run executar-migration" para que o sequelize crie a tabela perfil. 

10° Criar a migration de usuario atraves do comando "criar-migration" e renomeando ele.
    - Configurar o arquivo criado na migration;
    - Criar e configurar o arquivo criado dentro da pasta models;
    - Configurar o arquivo index.js com o modelo de Usuario

11° Criar erros personalizados;

12° Criar o serviço de usuário
    - Dentro da pasta service, criar o arquivo "usuárioService",  que é o arquivvo que conhece toda a lógica de negocio de uma API.
    - Na pasta "utils" criar um arquivo chamado "geradorToken.js", ele vai saber gerar token e gerar a senha para nós.
    - Baixar o md5 (npm i md5), é um tipo de criptografia que faz e não desfaz, gerar o hash das senhas, gera criptografados.
    - Exportar o gerador para o usuarioService e adicionar a lógica.
    - Exportar o usuarioService para o usuarioController e fazer a lógica.

13° Para debugar uma aplicação com Node.js. - Aperta "F5" e seleciona "Node.js" e em seguida coloca o braik point". 

14° Criar uma pasta chamada http para fazer os testes, nessa parta estara todas as requisições http da API.
    - Instalar a extensão, REST client, ela permite que façamos requisições http por dentro do VScode. 

15° Criar o cache, vai ser a lista em memoria que armazena todos os usuarios presentes na aplicação; 